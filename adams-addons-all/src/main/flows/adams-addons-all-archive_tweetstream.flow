# Project: adams
# Date: 2016-07-04 09:32:39
# User: fracpete
# Charset: UTF-8
adams.flow.control.Flow -annotation "Listens to the public tweet stream and archives the tweets in gzip compressed \\nCSV files. One file per day is generated. The files get stored in\\n  ${EXAMPLE_FLOWS}/output\\nNB: Once decompressed, MS Excel has problems opening these files, but \\nLibreOffice Calc works." -error-handling ACTORS_DECIDE_TO_STOP_ON_ERROR -flow-execution-listener adams.flow.execution.NullListener
 adams.flow.standalone.TwitterConnection
 adams.flow.standalone.CallableActors
  adams.flow.source.SequenceSource -name filename -annotation "Here the CSV filename is generated"
   adams.flow.source.Start
   adams.flow.transformer.Timestamp -format "\\\'${EXAMPLE_FLOWS}/output/tweets_\\\'yyyy-MM-dd\\\'.csv\\\'"
  adams.flow.sink.Display -name Progress -writer adams.data.io.output.NullWriter
 adams.flow.standalone.HashSetInit -storage-name csvfiles
 adams.flow.standalone.Events
  adams.flow.standalone.Cron -annotation "Checking every minute for new CSV files to gzip" -schedule "0 * * * * ?"
   adams.flow.source.HashSet -storage-name csvfiles
   adams.flow.transformer.SpreadSheetVariableRowIterator
   adams.flow.control.Trigger -name "gzip file"
    adams.flow.source.Variable -var-name Value
    adams.flow.transformer.GZIP -remove true -output ${TMP} -buffer 102400
    adams.flow.sink.CallableSink -callable Progress
   adams.flow.control.Trigger -name "remove file from \"to-zip\" list"
    adams.flow.source.Variable -var-name Value
    adams.flow.transformer.HashSetRemove -storage-name csvfiles
 adams.flow.source.TwitterListener -max-updates 0
 adams.flow.control.TriggerOnce -name "initial filename"
  adams.flow.source.CallableSource -callable filename
  adams.flow.transformer.SetVariable -name "initial filename" -var-name filename
 adams.flow.control.Count -condition "adams.flow.condition.bool.Counting -interval 1000"
  adams.flow.sink.CallableSink -callable Progress
 adams.flow.control.ConditionalTrigger -name "check whether new file started" -condition "adams.flow.condition.bool.Counting -interval 1000"
  adams.flow.source.CallableSource -callable filename
  adams.flow.control.ConditionalTee -annotation "New CSV file started?" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{filename}\\\\\\\" != \\\\\\\"X\\\\\\\"\""
   adams.flow.transformer.SetVariable -name "old filename" -var-name filename_old -var-value @{filename}
   adams.flow.transformer.SetVariable -name "new filename" -var-name filename
   adams.flow.control.Trigger -name "queue CSV file for gzipping"
    adams.flow.source.Variable -var-name filename_old
    adams.flow.transformer.HashSetAdd -storage-name csvfiles
 adams.flow.transformer.TwitterConverter -converter "adams.data.twitter.SpreadSheetConverter -field ID -field USER_ID -field USER_NAME -field SOURCE -field TEXT -field CREATED -field FAVORITED -field RETWEET -field RETWEET_COUNT -field RETWEET_BY_ME -field POSSIBLY_SENSITIVE -field GEO_LATITUDE -field GEO_LONGITUDE -field LANGUAGE_CODE -field PLACE -field PLACE_TYPE -field PLACE_URL -field STREET_ADDRESS -field COUNTRY -field COUNTRY_CODE -field IN_REPLY_TO_STATUS_ID -field IN_REPLY_TO_USER_ID -field RETWEETED_STATUS_ID -field RETWEETED_STATUS_USER_ID -field RETWEETED_STATUS_CREATED -field EXPANDED_URLS -data-row-type adams.data.spreadsheet.DenseDataRow -spreadsheet-type adams.data.spreadsheet.DefaultSpreadSheet"
 adams.flow.sink.SpreadSheetFileWriter -output @{filename} -writer "adams.data.io.output.CsvSpreadSheetWriter -appending true"
